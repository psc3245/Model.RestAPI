// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(SportsDbContext))]
    partial class SportsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApplication1.Complex_Entities.Game", b =>
                {
                    b.Property<Guid>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Attendance")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("GameDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("VenueId")
                        .HasColumnType("uuid");

                    b.HasKey("GameId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("VenueId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("WebApplication1.Complex_Entities.GameParticipant", b =>
                {
                    b.Property<Guid>("GameParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeamSeasonDetailId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamSeasonId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GameParticipantId");

                    b.HasIndex("GameId");

                    b.HasIndex("TeamSeasonDetailId");

                    b.ToTable("GameParticipants");
                });

            modelBuilder.Entity("WebApplication1.Complex_Entities.PlayerGameStat", b =>
                {
                    b.Property<Guid>("PlayerGameStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Stats")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("TeamSeasonDetailId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamSeasonId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PlayerGameStatId");

                    b.HasIndex("GameId");

                    b.HasIndex("PersonId");

                    b.HasIndex("TeamSeasonDetailId");

                    b.ToTable("PlayerGameStats");
                });

            modelBuilder.Entity("WebApplication1.Complex_Entities.Roster", b =>
                {
                    b.Property<Guid>("RosterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("JerseyNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TeamSeasonDetailId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamSeasonId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RosterId");

                    b.HasIndex("PersonId");

                    b.HasIndex("TeamSeasonDetailId");

                    b.ToTable("Rosters");
                });

            modelBuilder.Entity("WebApplication1.Complex_Entities.TeamGameStat", b =>
                {
                    b.Property<Guid>("TeamGameStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<string>("Stats")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("TeamSeasonDetailId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamSeasonId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TeamGameStatId");

                    b.HasIndex("GameId");

                    b.HasIndex("TeamSeasonDetailId");

                    b.ToTable("TeamGameStats");
                });

            modelBuilder.Entity("WebApplication1.Complex_Entities.TeamSeasonDetail", b =>
                {
                    b.Property<Guid>("TeamSeasonDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("HierarchyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LeagueHierarchyId")
                        .HasColumnType("uuid");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameAtTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TeamSeasonDetailId");

                    b.HasIndex("LeagueHierarchyId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamSeasonDetails");
                });

            modelBuilder.Entity("WebApplication1.Entities.League", b =>
                {
                    b.Property<Guid>("LeagueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SportId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LeagueId");

                    b.HasIndex("SportId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("WebApplication1.Entities.LeagueHierarchy", b =>
                {
                    b.Property<Guid>("LeagueHierarchyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LeagueId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("LeagueHierarchyId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("ParentId");

                    b.ToTable("LeagueHierarchies");
                });

            modelBuilder.Entity("WebApplication1.Entities.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhysicalAttributes")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PersonId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("WebApplication1.Entities.Season", b =>
                {
                    b.Property<Guid>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LeagueId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("SeasonId");

                    b.HasIndex("LeagueId", "Year", "Type")
                        .IsUnique();

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("WebApplication1.Entities.Sport", b =>
                {
                    b.Property<Guid>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SportId");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("WebApplication1.Entities.Team", b =>
                {
                    b.Property<Guid>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LeagueId")
                        .HasColumnType("uuid");

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TeamId");

                    b.HasIndex("LeagueId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("WebApplication1.Entities.Venue", b =>
                {
                    b.Property<Guid>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("VenueId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("WebApplication1.Complex_Entities.Game", b =>
                {
                    b.HasOne("WebApplication1.Entities.Season", "Season")
                        .WithMany("Games")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Entities.Venue", "Venue")
                        .WithMany("Games")
                        .HasForeignKey("VenueId");

                    b.Navigation("Season");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("WebApplication1.Complex_Entities.GameParticipant", b =>
                {
                    b.HasOne("WebApplication1.Complex_Entities.Game", "Game")
                        .WithMany("GameParticipants")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Complex_Entities.TeamSeasonDetail", "TeamSeasonDetail")
                        .WithMany("GameParticipants")
                        .HasForeignKey("TeamSeasonDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("TeamSeasonDetail");
                });

            modelBuilder.Entity("WebApplication1.Complex_Entities.PlayerGameStat", b =>
                {
                    b.HasOne("WebApplication1.Complex_Entities.Game", "Game")
                        .WithMany("PlayerGameStats")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Entities.Person", "Person")
                        .WithMany("PlayerGameStats")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Complex_Entities.TeamSeasonDetail", "TeamSeasonDetail")
                        .WithMany("PlayerGameStats")
                        .HasForeignKey("TeamSeasonDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Person");

                    b.Navigation("TeamSeasonDetail");
                });

            modelBuilder.Entity("WebApplication1.Complex_Entities.Roster", b =>
                {
                    b.HasOne("WebApplication1.Entities.Person", "Person")
                        .WithMany("Rosters")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Complex_Entities.TeamSeasonDetail", "TeamSeasonDetail")
                        .WithMany("Rosters")
                        .HasForeignKey("TeamSeasonDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("TeamSeasonDetail");
                });

            modelBuilder.Entity("WebApplication1.Complex_Entities.TeamGameStat", b =>
                {
                    b.HasOne("WebApplication1.Complex_Entities.Game", "Game")
                        .WithMany("TeamGameStats")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Complex_Entities.TeamSeasonDetail", "TeamSeasonDetail")
                        .WithMany("TeamGameStats")
                        .HasForeignKey("TeamSeasonDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("TeamSeasonDetail");
                });

            modelBuilder.Entity("WebApplication1.Complex_Entities.TeamSeasonDetail", b =>
                {
                    b.HasOne("WebApplication1.Entities.LeagueHierarchy", "LeagueHierarchy")
                        .WithMany("TeamSeasonDetails")
                        .HasForeignKey("LeagueHierarchyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Entities.Season", "Season")
                        .WithMany("TeamSeasonDetails")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Entities.Team", "Team")
                        .WithMany("TeamSeasonDetails")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeagueHierarchy");

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WebApplication1.Entities.League", b =>
                {
                    b.HasOne("WebApplication1.Entities.Sport", "Sport")
                        .WithMany("Leagues")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("WebApplication1.Entities.LeagueHierarchy", b =>
                {
                    b.HasOne("WebApplication1.Entities.League", "League")
                        .WithMany("LeagueHierarchies")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Entities.LeagueHierarchy", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("League");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("WebApplication1.Entities.Season", b =>
                {
                    b.HasOne("WebApplication1.Entities.League", "League")
                        .WithMany("Seasons")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("WebApplication1.Entities.Team", b =>
                {
                    b.HasOne("WebApplication1.Entities.League", "League")
                        .WithMany("Teams")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");
                });

            modelBuilder.Entity("WebApplication1.Complex_Entities.Game", b =>
                {
                    b.Navigation("GameParticipants");

                    b.Navigation("PlayerGameStats");

                    b.Navigation("TeamGameStats");
                });

            modelBuilder.Entity("WebApplication1.Complex_Entities.TeamSeasonDetail", b =>
                {
                    b.Navigation("GameParticipants");

                    b.Navigation("PlayerGameStats");

                    b.Navigation("Rosters");

                    b.Navigation("TeamGameStats");
                });

            modelBuilder.Entity("WebApplication1.Entities.League", b =>
                {
                    b.Navigation("LeagueHierarchies");

                    b.Navigation("Seasons");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("WebApplication1.Entities.LeagueHierarchy", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("TeamSeasonDetails");
                });

            modelBuilder.Entity("WebApplication1.Entities.Person", b =>
                {
                    b.Navigation("PlayerGameStats");

                    b.Navigation("Rosters");
                });

            modelBuilder.Entity("WebApplication1.Entities.Season", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("TeamSeasonDetails");
                });

            modelBuilder.Entity("WebApplication1.Entities.Sport", b =>
                {
                    b.Navigation("Leagues");
                });

            modelBuilder.Entity("WebApplication1.Entities.Team", b =>
                {
                    b.Navigation("TeamSeasonDetails");
                });

            modelBuilder.Entity("WebApplication1.Entities.Venue", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
